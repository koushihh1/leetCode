#include<iostream>
#include<vector>
#include<stack>


using namespace std;

class Solution {
public:
    vector<vector<int>> edges;
    vector<int> visited;
    bool IsAcyclic = true;
    stack<int> s;

    void DFS(int index) {
        visited[index] = 1;
        for (auto i : edges[index]) {
            if (visited[i] == 0) {
                DFS(i);
            }
            else if (visited[i] == 1) {
                IsAcyclic = false;
                return;
            }
        }
        visited[index] = 2;
        s.push(index);
    }

    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        visited.resize(numCourses);
        edges.resize(numCourses);
        for (auto i : prerequisites)
        {
            edges[i[1]].push_back(i[0]);
        }

        for (int j = 0; j < numCourses; j++) 
        {
            if (!visited[j])
            {
                DFS(j);
            }
        }

        vector<int> empty_vec;
        vector<int> result;
        if (!IsAcyclic) 
        {
            return empty_vec;
        }
        else 
        {
            while (!s.empty()) {
                int value = s.top();
                s.pop();
                result.push_back(value);
            }
            return result;
        }

    }
        
};





int main()
{
    Solution s;
    vector<vector<int>> v{ {1,0},{2,0},{3,1},{3,2} };
    vector<int> vec = s.findOrder(4,v);
    for (auto i : vec)
        cout << i << " ";
}